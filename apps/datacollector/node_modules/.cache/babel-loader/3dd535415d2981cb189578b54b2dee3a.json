{"ast":null,"code":"// zergski content manager\n// copying files before processing \nconst copycat = 'http://localhost/brokenOt/evilcook/src/fs/cat.php'; // just some tools..\n\nconst z = {\n  console: true,\n  display: false,\n\n  log(a, b, c, d, e, f) {\n    if (console) {// console.log(a,b,c,d,e,f);\n    }\n  }\n\n}; // const _evilcook = {\n// TEMP\n\nconst _evilcook = {\n  /**\r\n   * @param {boolean} [ log ] : well, display the console log ofcourse \r\n   * <p>  \r\n   * @param {string , null} [ baseUrl ] : set if you have defined a 'baseUrl' in your jsconfig.json. setting to 'src is very handy, is recommended and will simply remove all './' from imports. null will replace them with '../' and is the simplest solution. if a custom 'url' is set, keep in mind to define the child directory ( i.e if set to 'src', but all your imports go through 'src/components', set baseUrl to 'components'.)\r\n   * </p>\r\n   */\n  components: {\n    loaded: {\n      index: '.js'\n    },\n    collection: [],\n    count: 0\n  },\n  options: {\n    log: true,\n    baseUrl: 'src'\n  }\n};\nconst {\n  baseUrl\n} = _evilcook.options;\n_evilcook.options.importPath = baseUrl === 'src' ? \"'\" : baseUrl === null ? \"'../\" : `'${baseUrl}/`;\nwindow.cook = _evilcook;\n/**\r\n * We make copies of all imported and used components\r\n * @param {Array} list \r\n */\n\nasync function _zcmStart(list) {\n  const response = await fetch(copycat, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(list)\n  });\n  const {\n    log,\n    content\n  } = await response.json();\n  _evilcook.options.log && log.forEach(entry => console.log(entry));\n  content.forEach((component, index) => {\n    _evilcook.components.collection.push(component);\n\n    _evilcook.components.count++;\n\n    _processComponent(content, component, index);\n  });\n}\n\nlet _data = [];\n\nasync function _processComponent(content, component, index) {\n  var _rawComponent$match, _rawComponent$match2;\n\n  // let { importPath } = _evilcook.options;\n  let {\n    rawComponent\n  } = content[index].data;\n  let {\n    loaded\n  } = _evilcook.components; // just tested by removing comments\n\n  z.log(rawComponent);\n  rawComponent = rawComponent.replace(/\\B{\\/\\*\\B[\\s\\S]*\\B\\*\\/}\\B/g, '');\n  rawComponent = rawComponent.replace(/\\B\\/\\/.*\\n/g, '');\n  let matches = (_rawComponent$match = rawComponent.match(/\\B<[A-Z].*\\/>\\B/g)) === null || _rawComponent$match === void 0 ? void 0 : _rawComponent$match.map(res => res.replace(/<|\\s+|\\/+|>+/g, ''));\n  let routes = (_rawComponent$match2 = rawComponent.match(/\\B<Route.*\\/>\\B/g)) === null || _rawComponent$match2 === void 0 ? void 0 : _rawComponent$match2.map(res => {\n    return res.replace(/^.+{ | }.+$/g, '');\n  });\n  let imports = rawComponent.split('import'); // let body = imports.pop();\n  // let variables = splitByVariables(body);\n\n  let componentPath = [];\n  matches || (matches = [matches]);\n  let keys = [];\n\n  if (routes) {\n    keys = [...routes, ...keys];\n  }\n\n  if (matches[0]) {\n    let check = [];\n    matches.forEach(match => {\n      if (match !== undefined) {\n        if (loaded[match] === match) {\n          z.log(match, 'already processed');\n        } else {\n          check.push(match);\n        }\n      }\n    });\n    check[0] && (keys = [...check, ...keys]);\n  }\n\n  imports.forEach(line => {\n    var _keys;\n\n    return (_keys = keys) === null || _keys === void 0 ? void 0 : _keys.forEach(key => {\n      if (line.includes(key)) {\n        loaded[key] = key;\n        componentPath.push(line.match(/'.+'|\".+\"/g)[0].replace(/\\.+|\"+|'+/g, '').split('/'));\n      } else {\n        return;\n      }\n    });\n  });\n  Polly.catArray = [];\n  filePath = {};\n  componentPath.forEach(c => {\n    var _loaded$c$;\n\n    if ((_loaded$c$ = loaded[c[0]]) === null || _loaded$c$ === void 0 ? void 0 : _loaded$c$.includes(c[1])) {\n      console.log(c[1], 'repeated');\n    } else {\n      // console.log(c);\n      c[0] === '' && c.shift();\n      filePath = {\n        file: c.pop(),\n        path: c.join('/') === '' ? 'root' : c.join('/')\n      };\n      Polly.catArray.push(filePath);\n    }\n  });\n\n  _data.push(content);\n\n  Polly.catArray[0] && _zcmStart(Polly);\n} // we start with index.js\n\n\nlet filePath = {};\nlet Polly = {\n  catArray: [{\n    file: 'index',\n    path: 'root'\n  }]\n};\n\n_zcmStart(Polly);","map":{"version":3,"sources":["C:/webWork/htdocs/angryPXL/apps/datacollector/src/logic/cat.js"],"names":["copycat","z","console","display","log","a","b","c","d","e","f","_evilcook","components","loaded","index","collection","count","options","baseUrl","importPath","window","cook","_zcmStart","list","response","fetch","method","headers","body","JSON","stringify","content","json","forEach","entry","component","push","_processComponent","_data","rawComponent","data","replace","matches","match","map","res","routes","imports","split","componentPath","keys","check","undefined","line","key","includes","Polly","catArray","filePath","shift","file","pop","path","join"],"mappings":"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","sourcesContent":["// zergski content manager\r\n// copying files before processing \r\nconst copycat = 'http://localhost/brokenOt/evilcook/src/fs/cat.php';\r\n\r\n\r\n// just some tools..\r\nconst z = {\r\n\tconsole: true,\r\n\tdisplay: false,\r\n\tlog (a,b,c,d,e,f) {\r\n\r\n\t\tif ( console ) {\r\n\t\t\t// console.log(a,b,c,d,e,f);\r\n\t\t}\r\n\t},\r\n}\r\n\r\n\r\n// const _evilcook = {\r\n// TEMP\r\nconst _evilcook = {\r\n\t/**\r\n\t * @param {boolean} [ log ] : well, display the console log ofcourse \r\n\t * <p>  \r\n\t * @param {string , null} [ baseUrl ] : set if you have defined a 'baseUrl' in your jsconfig.json. setting to 'src is very handy, is recommended and will simply remove all './' from imports. null will replace them with '../' and is the simplest solution. if a custom 'url' is set, keep in mind to define the child directory ( i.e if set to 'src', but all your imports go through 'src/components', set baseUrl to 'components'.)\r\n\t * </p>\r\n\t */\r\n\tcomponents: {\r\n\t\tloaded: {\r\n\t\t\tindex: '.js',\r\n\t\t},\r\n\t\tcollection: [],\r\n\t\tcount: 0,\r\n\t},\r\n\toptions: {\r\n\t\tlog: true,\r\n\t\tbaseUrl: 'src',\r\n\t},\r\n}\r\nconst { baseUrl } = _evilcook.options;\r\n_evilcook.options.importPath = baseUrl === 'src' ? \"'\" : baseUrl === null ? \"'../\" : `'${baseUrl}/` ;\r\n\r\nwindow.cook = _evilcook;\r\n\r\n/**\r\n * We make copies of all imported and used components\r\n * @param {Array} list \r\n */\r\nasync function _zcmStart( list ) {\r\n\r\n\tconst response = await fetch(\r\n\t\tcopycat,\r\n\t\t{\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(list),\r\n\t\t}\r\n\t);\r\n\tconst { log, content } = await response.json();\r\n\r\n\t_evilcook.options.log && log.forEach( entry => console.log(entry));\r\n\t\r\n\tcontent.forEach( ( component, index ) => {\r\n\t\t_evilcook.components.collection.push(component);\r\n\t\t_evilcook.components.count++;\r\n\t\t\r\n\t\t_processComponent( content, component, index );\r\n\t});\r\n}\r\nlet _data = [];\r\n\r\n\r\n\r\n\r\n\r\nasync function _processComponent ( content, component, index ) {\r\n\t// let { importPath } = _evilcook.options;\r\n\tlet { rawComponent } = content[index].data;\r\n\tlet { loaded } = _evilcook.components;\r\n\r\n\r\n\t// just tested by removing comments\r\n\tz.log(rawComponent);\r\n\trawComponent = rawComponent.replace(/\\B{\\/\\*\\B[\\s\\S]*\\B\\*\\/}\\B/g, '');\r\n\trawComponent = rawComponent.replace(/\\B\\/\\/.*\\n/g, '');\r\n\r\n\r\n\tlet matches = rawComponent.match(/\\B<[A-Z].*\\/>\\B/g)?.map( res => res.replace(/<|\\s+|\\/+|>+/g, ''));\r\n\t\r\n\tlet routes = rawComponent.match(/\\B<Route.*\\/>\\B/g)?.map( res => { return res.replace(/^.+{ | }.+$/g, '') });\r\n\tlet imports = rawComponent.split('import');\r\n\t// let body = imports.pop();\r\n\t// let variables = splitByVariables(body);\r\n\tlet componentPath = [];\r\n\tmatches || ( matches = [matches] );\r\n\tlet keys = [];\r\n\tif ( routes ) {\r\n\t\tkeys = [ ...routes, ...keys ];\r\n\t}\r\n\tif ( matches[0] ) {\r\n\t\tlet check = [];\r\n\t\tmatches.forEach( match => {\r\n\t\t\tif ( match !== undefined ) {\r\n\t\t\t\tif ( loaded[ match ] === match ) {\r\n\t\t\t\t\tz.log( match, 'already processed' );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcheck.push( match );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tcheck[0] && ( keys = [ ...check, ...keys ] );\r\n\t}\r\n\r\n\r\n\r\n\timports.forEach( line =>\r\n\t\tkeys?.forEach( key => {\r\n\r\n\t\t\tif ( line.includes(key) ) {\r\n\t\t\t\tloaded[ key ] = key;\r\n\t\t\t\tcomponentPath.push( line.match(/'.+'|\".+\"/g)[0].replace(/\\.+|\"+|'+/g, '').split('/') );\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t}));\r\n\r\n\tPolly.catArray = [];\r\n\tfilePath = {};\r\n\tcomponentPath.forEach( c => {\r\n\t\tif ( loaded[ c[0] ]?.includes(c[1]) ) {\r\n\t\t\tconsole.log( c[1], 'repeated');\r\n\t\t} else {\r\n\t\t\t// console.log(c);\r\n\t\t\tc[0] === '' && c.shift();\r\n\t\t\tfilePath = { file: c.pop(), path: c.join('/') === '' ? 'root' : c.join('/') }\r\n\t\t\tPolly.catArray.push( filePath );\r\n\t\t}\r\n\t})\r\n\r\n\r\n\r\n\r\n\t_data.push(content);\r\n\tPolly.catArray[0] && _zcmStart( Polly );\r\n}\r\n\r\n// we start with index.js\r\nlet filePath = {};\r\nlet Polly = { catArray: [ { file: 'index', path: 'root' }]};\r\n\r\n_zcmStart( Polly );"]},"metadata":{},"sourceType":"module"}